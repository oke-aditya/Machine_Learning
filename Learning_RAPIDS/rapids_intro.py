# -*- coding: utf-8 -*-
"""RAPIDS_Intro.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11M0rHM6Q3cao8_tYzp-XTZrOh9e-CAL1

# Accelerating Pandas and Scikit Learn on GPU using RAPIDS

- Note use only T4 or P100 Or P4 GPU which is compatible for RAPIDS.

- https://github.com/rapidsai

- RAPIDS Uses the folowing componenets: -
- CuML : - Cuda Accelerated Machine learning. (GPU Replacement for sklearn)
- Cudf : - Cuda DataFrames (GPU Replacement for pandas)
- CuGraph : - Cuda accelerated Graphs. (GPU Replacement for networkX)
- CuDNN : - Cuda Deep Neural Networks

# Installing RAPIDS.

- Follow the procedure.
"""

!nvidia-smi

# Install RAPIDS
!git clone https://github.com/rapidsai/rapidsai-csp-utils.git
!bash rapidsai-csp-utils/colab/rapids-colab.sh

import sys, os

dist_package_index = sys.path.index('/usr/local/lib/python3.6/dist-packages')
sys.path = sys.path[:dist_package_index] + ['/usr/local/lib/python3.6/site-packages'] + sys.path[dist_package_index:]
sys.path
exec(open('rapidsai-csp-utils/colab/update_modules.py').read(), globals())

"""# Now we can use CuML and CuDf"""

import cuml, cudf

import sys,tempfile, urllib, os
import pandas as pd
from sklearn.model_selection import train_test_split
import numpy as np

from sklearn.datasets import fetch_openml
covtyp = fetch_openml(name='covertype', version=4)
# Predicting the forest cover type using 53 variables.
# Predict one categorical class.

covtyp.data.shape

np.unique(covtyp.target)

# Still we have not loaded the data
!nvidia-smi

cov_df = pd.DataFrame(data=np.c_[covtyp['data'], covtyp['target']], columns=covtyp['feature_names'] + ['target'])

cov_df.memory_usage().sum()

cov_df.head()

cov_df.target.value_counts()

cov_df.dtypes

"""- Convert all objects into float32 format.
- Keep the categorical target as int32
"""

for cols in cov_df.columns:
    cov_df[cols] = cov_df[cols].astype(np.float32)

cov_df.dtypes

cov_df['target'] = cov_df['target'].astype(np.int32)

"""- Keep target variable from 0 - 7 instead of 1 - 8"""

cov_df['target'] = cov_df['target'] - 1

cov_df_x = cov_df.drop(['target'], axis=1)

cov_df_y = cov_df['target']

cov_df_x.head()

cov_df_y = pd.DataFrame(cov_df_y)

cov_df_y['target'] = cov_df_y['target'].astype(np.int32)

cov_df_y['target'].value_counts()

cov_df_y.dtypes

X_train, X_test, y_train, y_test = train_test_split(cov_df_x, cov_df_y, train_size=0.75, stratify=cov_df_y, random_state=31)

"""- This moves data to GPU by making a GPU dataframe"""

X_train_gdf = cudf.DataFrame.from_pandas(X_train)
X_test_gdf = cudf.DataFrame.from_pandas(X_test)
y_train_gdf = cudf.DataFrame.from_pandas(y_train)
y_test_gdf = cudf.DataFrame.from_pandas(y_test)

!nvidia-smi

from cuml import RandomForestClassifier as curf
import time

curf_params = {
    'n_estimators' : 250,
    'max_depth' : 3,
    'n_streams' : 1,
    'split_algo' : 0,
    'seed' : 1000
}

clf = curf(**curf_params)

start_time = time.time()
clf.fit(X_train_gdf, y_train_gdf)
end_time = time.time()
print("Time taken to train = %s" %(end_time - start_time))

pred = clf.predict(X_test_gdf)

print(pred)

print(pred[0])

# There may be problem with older versions. Tested on v 0.12
clf.score(X_test_gdf, y_test_gdf)

# We can take values to local memory
pred_out = pred.copy_to_host()

from sklearn.metrics import confusion_matrix

confusion_matrix(y_test, pred_out)