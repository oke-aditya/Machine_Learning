# -*- coding: utf-8 -*-
"""mlflow_intro.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JQUCLiq3tX3jD_voQCAEKkSSpj2HZwb-

# Using MLflow

- Allows us to train, track experiments.
- Allows Machine Learning Tracking.
- Experiment tracking, epoch tracking, hyperparameter tracking.
- Features tracking, model tracking, code tracking.
- SageMaker, Azure, GCP supports MLflow
- Used in multiple languages, R, Python, Java, Scala
- Has UI also

# Installing
"""

! pip install --quiet mlflow

import mlflow
import mlflow.sklearn

"""# Load data"""

from sklearn.datasets import load_iris
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics

data = load_iris()

# print(data)
print(data.target_names)

print(data.feature_names)

X = data.data
Y = data.target

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=31)

"""# Some EDA

- Even the EDA results can be tracked by MLFlow.
- MLFlow will help in tracking data.
"""

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from sklearn.decomposition import PCA

X = data.data[:, :2]
y = data.target

x_min, x_max = X[:, 0].min() - .5, X[:, 0].max() + .5
y_min, y_max = X[:, 1].min() - .5, X[:, 1].max() + .5

plt.figure(2, figsize=(8, 6))
plt.clf()

plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Set1, edgecolors='k')
plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')
plt.xlim(x_min, x_max)
plt.ylim(y_min, y_max)
plt.xticks([])
plt.yticks([])

fig = plt.figure(1, figsize=(8, 6))
ax = Axes3D(fig, elev=-150, azim=110)
X_reduced = PCA(n_components=3).fit_transform(data.data)
ax.scatter(X_reduced[:, 0], X_reduced[:, 1], X_reduced[:, 2], c=y, cmap=plt.cm.Set1)
ax.set_title("First three PCA dimensions")
ax.set_xlabel("First Eigenvector")
ax.w_xaxis.set_ticklabels([])

ax.set_ylabel("Second Eigenvector")
ax.w_yaxis.set_ticklabels([])

ax.set_zlabel("Second Eigenvector")
ax.w_zaxis.set_ticklabels([])

fig.savefig('iris1.png')

"""# Using MLFlow

- It takes the pickle file and saves along with the experiment.
- It saves the png file of eda as well.
- It can even log the feature names.
- It can track as many artifacts, metrics and models.
"""

with mlflow.start_run():
    dtc = DecisionTreeClassifier(random_state=10)
    dtc.fit(X_train,y_train)
    y_pred_class = dtc.predict(X_test)
    accuracy = metrics.accuracy_score(y_test, y_pred_class)

    print(accuracy)
    mlflow.log_param("random_state", 10)
    mlflow.log_metric("accuracy", accuracy)
    mlflow.sklearn.log_model(dtc, "model")
    modelpath = "/content/mlflow/iris/model-%s-%d" %("decision_tree", 2)
    mlflow.sklearn.save_model(dtc, modelpath)
    mlflow.log_artifact("iris1.png")

"""- conda.yaml contains all the dependencies.
- it saves the plots as well.
- it saves the pickle file of the model.
- it has mlmodel file which describes the particular run.
"""

! mlflow ui

with mlflow.start_run():
    dtc = DecisionTreeClassifier(max_depth=1, random_state=10)
    dtc.fit(X_train,y_train)
    y_pred_class = dtc.predict(X_test)
    accuracy = metrics.accuracy_score(y_test, y_pred_class)

    print(accuracy)
    mlflow.log_param("random_state", 10)
    mlflow.log_param("max_depth", 1)
    mlflow.log_metric("accuracy", accuracy)
    mlflow.sklearn.log_model(dtc, "model")
    modelpath = "/content/mlflow/iris/model-%s-%d" %("decision_tree", 3)
    mlflow.sklearn.save_model(dtc, modelpath)
    mlflow.log_artifact("iris1.png")

with mlflow.start_run():
    dtc = DecisionTreeClassifier(max_depth=1, min_samples_split=5, random_state=10)
    dtc.fit(X_train,y_train)
    y_pred_class = dtc.predict(X_test)
    accuracy = metrics.accuracy_score(y_test, y_pred_class)

    print(accuracy)
    mlflow.log_param("random_state", 10)
    mlflow.log_param("max_depth", 1)
    mlflow.log_metric("accuracy", accuracy)
    mlflow.log_param("min_samples_split", 5)
    mlflow.sklearn.log_model(dtc, "model")
    modelpath = "/content/mlflow/iris/model-%s-%d" %("decision_tree", 4)
    mlflow.sklearn.save_model(dtc, modelpath)
    mlflow.log_artifact("iris1.png")

"""Let's trt another classifier"""

with mlflow.start_run():
    knn = KNeighborsClassifier(n_neighbors=2)
    knn.fit(X_train,y_train)
    y_pred_class = knn.predict(X_test)
    accuracy = metrics.accuracy_score(y_test, y_pred_class)
    print(accuracy)
    mlflow.log_param("n_neighbors", 2)
    mlflow.log_metric("accuracy", accuracy)
    mlflow.sklearn.log_model(knn, "model")
    model_path = "/content/mlflow/iris/model-%s-%d" %("knn", 1)
    mlflow.sklearn.save_model(knn, model_path)
    mlflow.log_artifact("iris1.png")

with mlflow.start_run():
    knn = KNeighborsClassifier(n_neighbors=5)
    knn.fit(X_train,y_train)
    y_pred_class = knn.predict(X_test)
    accuracy = metrics.accuracy_score(y_test, y_pred_class)
    print(accuracy)
    mlflow.log_param("n_neighbors", 5)
    mlflow.log_metric("accuracy", accuracy)
    mlflow.sklearn.log_model(knn, "model")
    model_path = "/content/mlflow/iris/model-%s-%d" %("knn", 5)
    mlflow.sklearn.save_model(knn, model_path)
    mlflow.log_artifact("iris1.png")

mlflow.search_runs()

"""# Using Models

Use the run id from mlflow.search_runs()
"""

run_id1 = "9ac9e0aa8ce648cfab58c70d33da74e4"
model_uri = "runs:/" + run_id1 + "/model"

model = mlflow.sklearn.load_model(model_uri=model_uri)

model.get_params()

predictions = model.predict_proba(X_test)